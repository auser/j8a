version: 2.1
commands:
  intjob:
    parameters:
      test:
        type: string
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Install upstream server helpers
          command: |
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server 01
          command: |
            UPSTREAM_01_PORT=60083
            UPSTREAM_01_SLUG=/mse6
            mse6 -p ${UPSTREAM_01_PORT} -u ${UPSTREAM_01_SLUG}
          background: true
      - run:
          name: Start upstream server 02
          command: |
            UPSTREAM_02_PORT=60084
            UPSTREAM_02_SLUG=/mse6
            mse6 -p ${UPSTREAM_02_PORT} -u ${UPSTREAM_02_SLUG}
          background: true
      - run:
          name: Start upstream server 03
          command: |
            UPSTREAM_03_PORT=60085
            UPSTREAM_03_SLUG=/s01
            mse6 -p ${UPSTREAM_03_PORT} -u ${UPSTREAM_03_SLUG}
          background: true
      - run:
          name: Start upstream server 04
          command: |
            UPSTREAM_04_PORT=60086
            UPSTREAM_04_SLUG=/s02
            mse6 -p ${UPSTREAM_04_PORT} -u ${UPSTREAM_04_SLUG}
          background: true
      - run:
          name: Start upstream server 05
          command: |
            UPSTREAM_05_PORT=60087
            UPSTREAM_05_SLUG=/s03
            mse6 -p ${UPSTREAM_05_PORT} -u ${UPSTREAM_05_SLUG}
          background: true
      - run:
          name: Start upstream server 06
          command: |
            UPSTREAM_06_PORT=60088
            UPSTREAM_06_SLUG=/s04
            mse6 -p ${UPSTREAM_06_PORT} -u ${UPSTREAM_06_SLUG}
          background: true
      - run:
          name: Start upstream server 07
          command: |
            UPSTREAM_07_PORT=60089
            UPSTREAM_07_SLUG=/s05
            mse6 -p ${UPSTREAM_07_PORT} -u ${UPSTREAM_07_SLUG}
          background: true
      - run:
          name: Start upstream server 08
          command: |
            UPSTREAM_08_PORT=60090
            UPSTREAM_08_SLUG=/s06
            mse6 -p ${UPSTREAM_08_PORT} -u ${UPSTREAM_08_SLUG}
          background: true
      - run:
          name: Start upstream server 09
          command: |
            UPSTREAM_09_PORT=60091
            UPSTREAM_09_SLUG=/s07
            mse6 -p ${UPSTREAM_09_PORT} -u ${UPSTREAM_09_SLUG}
          background: true
      - run:
          name: Start upstream server 10
          command: |
            UPSTREAM_10_PORT=60092
            UPSTREAM_10_SLUG=/s08
            mse6 -p ${UPSTREAM_10_PORT} -u ${UPSTREAM_10_SLUG}
          background: true
      - run:
          name: Start upstream server 11
          command: |
            UPSTREAM_11_PORT=60093
            UPSTREAM_11_SLUG=/s09
            mse6 -p ${UPSTREAM_11_PORT} -u ${UPSTREAM_11_SLUG}
          background: true
      - run:
          name: Start upstream server 12
          command: |
            UPSTREAM_12_PORT=60094
            UPSTREAM_12_SLUG=/s10
            mse6 -p ${UPSTREAM_12_PORT} -u ${UPSTREAM_12_SLUG}
          background: true
      - run:
          name: Start upstream server 13
          command: |
            UPSTREAM_13_PORT=60095
            UPSTREAM_13_SLUG=/s11
            mse6 -p ${UPSTREAM_13_PORT} -u ${UPSTREAM_13_SLUG}
          background: true
      - run:
          name: Start upstream server 14
          command: |
            UPSTREAM_14_PORT=60096
            UPSTREAM_14_SLUG=/s12
            mse6 -p ${UPSTREAM_14_PORT} -u ${UPSTREAM_14_SLUG}
          background: true
      - run:
          name: Start upstream server 15
          command: |
            UPSTREAM_15_PORT=60097
            UPSTREAM_15_SLUG=/s13
            mse6 -p ${UPSTREAM_15_PORT} -u ${UPSTREAM_15_SLUG}
          background: true
      - run:
          name: Start upstream server 16
          command: |
            UPSTREAM_16_PORT=60098
            UPSTREAM_16_SLUG=/s14
            mse6 -p ${UPSTREAM_16_PORT} -u ${UPSTREAM_16_SLUG}
          background: true
      - run:
          name: Start upstream server 17
          command: |
            UPSTREAM_17_PORT=60099
            UPSTREAM_17_SLUG=/s15
            mse6 -p ${UPSTREAM_17_PORT} -u ${UPSTREAM_17_SLUG}
          background: true
      - run:
          name: Start upstream server 18
          command: |
            UPSTREAM_18_PORT=60100
            UPSTREAM_18_SLUG=/s16
            mse6 -p ${UPSTREAM_18_PORT} -u ${UPSTREAM_18_SLUG}
          background: true
      - run:
          name: Start upstream server 19 (TLS)
          command: |
            UPSTREAM_19_PORT=60101
            UPSTREAM_19_SLUG=/badssl
            mse6 -p ${UPSTREAM_19_PORT} -u ${UPSTREAM_19_SLUG} -s
          background: true

      - run:
          name: Wait for upstream servers
          command: |
            #ports have to be inline in command, cannot share env.
            pwt localhost:60083
            pwt localhost:60084
            pwt localhost:60085
            pwt localhost:60086
            pwt localhost:60087
            pwt localhost:60088
            pwt localhost:60089
            pwt localhost:60090
            pwt localhost:60091
            pwt localhost:60092
            pwt localhost:60093
            pwt localhost:60094
            pwt localhost:60095
            pwt localhost:60096
            pwt localhost:60097
            pwt localhost:60098
            pwt localhost:60099
            pwt localhost:60100
            pwt localhost:60101

      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a one
          command: |
            J8A_ONE_CFG=./integration/j8a1.yml
            j8a -c ${J8A_ONE_CFG}
          background: true
      - run:
          name: Wait for j8a one
          command: |
            J8A_ONE_PORT=8080
            pwt localhost:${J8A_ONE_PORT}
      - run:
          name: Start j8a two
          command: |
            J8A_TWO_CFG=./integration/j8a2.yml
            j8a -c ${J8A_TWO_CFG}
          background: true
      - run:
          name: Wait for j8a two
          command: |
            J8A_TWO_PORT=8081
            pwt localhost:${J8A_TWO_PORT}
      - run:
          name: Start j8a three
          command: |
            J8A_THREE_CFG=./integration/j8a3.yml
            j8a -c ${J8A_THREE_CFG}
          background: true
      - run:
          name: Wait for j8a three
          command: |
            J8A_THREE_PORT=8443
            pwt localhost:${J8A_THREE_PORT}
      - run:
          name: Start j8a four
          command: |
            export PORT=9443
            export J8A_CERTIFICATE=`-----BEGIN CERTIFICATE-----
                    MIIEkzCCAvugAwIBAgIRANiwkh9AuRgrvYh7Y5DtWIUwDQYJKoZIhvcNAQELBQAw
                    gYExHjAcBgNVBAoTFW1rY2VydCBkZXZlbG9wbWVudCBDQTErMCkGA1UECwwic2lt
                    b25taXR0YWdAdHJvb3BlciAoU2ltb24gTWl0dGFnKTEyMDAGA1UEAwwpbWtjZXJ0
                    IHNpbW9ubWl0dGFnQHRyb29wZXIgKFNpbW9uIE1pdHRhZykwHhcNMTkwNjAxMDAw
                    MDAwWhcNMzAwNzMwMDExNDU5WjBjMScwJQYDVQQKEx5ta2NlcnQgZGV2ZWxvcG1l
                    bnQgY2VydGlmaWNhdGUxODA2BgNVBAsML3NpbW9ubWl0dGFnQE1hY0Jvb2stUHJv
                    LTE2LmxvY2FsIChTaW1vbiBNaXR0YWcpMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
                    MIIBCgKCAQEAsCTQ9rLTQYjIlGF7EOrTJux8E514TUoAuQ0xo1NOSssptjmDyGhb
                    8K7+A/TgdU/xlPMcJf22nNDQ2MpqpgHGlDcuXt3SmVrcsTeby1Pa81gxKp23a51B
                    8xAoHoHwXVSWdiMWk3H/Jjv/dtYL1L180neewcWvK26ANUwlzWG6BW1QVUXXNdRo
                    dmxQ1eg2S/qMBASFj6QjCsWWJiEfmz4PQpsP8q5IqCcX85BUqGO919JlE/eXEAgk
                    9Yuh61/50n39B/sPC0mU5s6vH0SPCBvz1g8SiXa8jj3jCXxa/0ZsYtAVqPe5BoRP
                    vK2q1sbKbJVr7EpmiOdKxKPHonRHasweGwIDAQABo4GiMIGfMA4GA1UdDwEB/wQE
                    AwIFoDATBgNVHSUEDDAKBggrBgEFBQcDATAMBgNVHRMBAf8EAjAAMB8GA1UdIwQY
                    MBaAFMNEcloV4jg+eonB5omuJvQXiqiRMEkGA1UdEQRCMECCDyouamFiYmF0ZXN0
                    LmNvbYIKamFiYmEudGVzdIIJbG9jYWxob3N0hwR/AAABhxAAAAAAAAAAAAAAAAAA
                    AAABMA0GCSqGSIb3DQEBCwUAA4IBgQDGI3EUWPKsEOqLCpnwSlFihu8n9+g4pV3/
                    jItYhUqMBz1v8TqV2zykkJUtlfNoxrp5OAg4CG0Xr1zhqjub3teKbsNKlRpV+h04
                    4ncltpe66u4gg9RW+ww/f+J3C2yZRIX+brhDcTpdEMyfVoCV/5jeCxWf29MdFcLU
                    BfgFdEp1oe3bK/dyZc8SbUlmizyumaDOaZACihz/DKsJ+lzRdy6c3UPQgC3r72oN
                    Lx/ccpnwdeumWFs+qYOjYfrCGFXaabokdtyit4XURFngxpnPUB9jHDvkI5+/eTaB
                    SpdjJxE6x4mciyZSvshhu1v8j52+d9zUANs9+Y/v6EoCZ6byaaS4NAmTXdAWlnYb
                    hIuRRsI4gIDhJWLrACBu1Osh7ZknaLNVMt5xo3TemCkVKud3NHGbycHTUoFBuHz/
                    JOTQJ/Z1Ym3enpTAESZVcZTzS9gL62wfIfLcFvq+tVjoJZVJCcolP2fYn3U5lEiN
                    vZvs72xp4sYEOa9zhvEs/yte9c6rkU0=
                    -----END CERTIFICATE-----
                    -----BEGIN CERTIFICATE-----
                    MIIE0zCCAzugAwIBAgIQB2bsiI7SUtxu+HwBxuNtpDANBgkqhkiG9w0BAQsFADCB
                    gTEeMBwGA1UEChMVbWtjZXJ0IGRldmVsb3BtZW50IENBMSswKQYDVQQLDCJzaW1v
                    bm1pdHRhZ0B0cm9vcGVyIChTaW1vbiBNaXR0YWcpMTIwMAYDVQQDDClta2NlcnQg
                    c2ltb25taXR0YWdAdHJvb3BlciAoU2ltb24gTWl0dGFnKTAeFw0yMDA1MDEyMTE2
                    NDNaFw0zMDA1MDEyMTE2NDNaMIGBMR4wHAYDVQQKExVta2NlcnQgZGV2ZWxvcG1l
                    bnQgQ0ExKzApBgNVBAsMInNpbW9ubWl0dGFnQHRyb29wZXIgKFNpbW9uIE1pdHRh
                    ZykxMjAwBgNVBAMMKW1rY2VydCBzaW1vbm1pdHRhZ0B0cm9vcGVyIChTaW1vbiBN
                    aXR0YWcpMIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAzivKfp5OiWpT
                    362cVgbw9DBqwMP0pO32aP79Y4UYeAxCfaWQDdqQEatBdraShtZcvUX8vZ9jvgHE
                    oGMGSJb/DIVRxIDfhdvhh4qGQgbbSLwDkfLJTkpGMdONa/5yDC54fNZjF095YZn7
                    iPmsFbvYUfTwpM8qrP+jZzobByrTO4rG3Ps080gIR08RCA0E+uLg58rTpnsdBKZ0
                    K2uuE4B4lVAs2AeS4KPMrH/rnCjSZz4KRwnaGqh+wiAjO0PHAfrbrhNsFB6P1/Zk
                    Cqzclj3TXdkMDaXhSvt0qJPEpNIPQMkvj9GROom7hExZUT7t7LPOZwODtiR2VjM3
                    DDehfLqpNPRrxU3aOR7b4lFVtEL1+9NXKc3rnR5T2xPVVvBxx8FqYAxFmQtkGqpA
                    YlRxImBONBreIr5/fdkr5xqd/S0s1pb8ubuK7x5COfqf0Mv++j+UjMptBQ3kYvOh
                    tNrbnEI1q/7kvHNB8ETtJ4hqXikl9EHMYWdOo4nyGd4P8jo9jmGVAgMBAAGjRTBD
                    MA4GA1UdDwEB/wQEAwICBDASBgNVHRMBAf8ECDAGAQH/AgEAMB0GA1UdDgQWBBTD
                    RHJaFeI4PnqJweaJrib0F4qokTANBgkqhkiG9w0BAQsFAAOCAYEAb+K3HO2AlDed
                    S2yT7GnxD75Hcjnv1tMvMIlh1EOmRMHrzbsi7jv3Z7SDe2R5s1qRku3nxbVWj8i8
                    oRBi5GeRE+q/HkVloi4WPmgFGxUUbkWszAFSSGN5TAs72e5sCG/wMyEa0Gj8cOO1
                    dK5SH3thP8+OjSpgQXToYfOimILlk7Hj7EgKE5Y8YX8UV+41LhGkzeK2UX9dBZn1
                    of9qBc0dAQVlAA/O3dOgXorgiDbNT38cjignWEwVYzjeuJCYB91Ixf0CfHJZKHZR
                    ZCdIAHTJqW1tx7vsbrcl0PVAMgm+rkHLL0Dh9cp4fvONXWygVSjbqKM1s8UI9bFA
                    bWU5Z3MhEn25wZCXLQDIq0uC+FwCxyS9e/exL4wmYpCLmRKVCp2gUa78Rlr/FJNa
                    H9kfvP41Ya+fLzDWNKAlYQgizpZJmZuhPZu7O6n0UusaI+0WTKblCFUQJkx4aKEv
                    io8QmLzoedmvVpO9Zp44Lyabmc7VnjoYTOcZczx4ECwEdKH/jswc
                    -----END CERTIFICATE-----`
            J8A_FOUR_CFG=./integration/templatej8a3.yml
            j8a -c ${J8A_FOUR_CFG}
          background: true
      - run:
          name: Wait for j8a four
          command: |
            J8A_FOUR_PORT=9443
            pwt localhost:${J8A_FOUR_PORT}
      - run:
          name: Start j8a five
          command: |
            export J8ACFG_YML=`---\nconnection:\n  downstream:\n    readTimeoutSeconds: {{.READ_TIME_OUT_SECONDS}}\n    roundTripTimeoutSeconds: 20\n    idleTimeoutSeconds: 30\n    port: 8080\n    mode: HTTP\n    maxBodyBytes: 65535\n  upstream:\n    socketTimeoutSeconds: 3\n    readTimeoutSeconds: 30\n    idleTimeoutSeconds: 10\n    maxAttempts: 4\n    poolSize: 8\n    tlsInsecureSkipVerify: true\npolicies:\n  ab:\n    - label: green\n      weight: 0.8\n    - label: blue\n      weight: 0.2\nroutes:\n  - path: \"/todos\"\n    resource: jsonplaceholder\n  - path: \"/about\"\n    resource: about\n  - path: \"/mse6/some\"\n    resource: mse61\n  - path: \"/mse6/\"\n    resource: mse6\n    policy: ab\n  - path: \"/s01\"\n    resource: s01\n  - path: \"/s02\"\n    resource: s02\n  - path: \"/s03\"\n    resource: s03\n  - path: \"/s04\"\n    resource: s04\n  - path: \"/s05\"\n    resource: s05\n  - path: \"/s06\"\n    resource: s06\n  - path: \"/s07\"\n    resource: s07\n  - path: \"/s08\"\n    resource: s08\n  - path: \"/s09\"\n    resource: s09\n  - path: \"/s10\"\n    resource: s10\n  - path: \"/s11\"\n    resource: s11\n  - path: \"/s12\"\n    resource: s12\n  - path: \"/s13\"\n    resource: s13\n  - path: \"/s14\"\n    resource: s14\n  - path: \"/s15\"\n    resource: s15\n  - path: \"/s16\"\n    resource: s16\n  - path: \"/badip\"\n    resource: badip\n  - path: \"/baddns\"\n    resource: baddns\n  - path: \"/badremote\"\n    resource: badremote\n  - path: \"/badlocal\"\n    resource: badlocal\n  - path: /badssl\n    resource: badssl\nresources:\n  jsonplaceholder:\n    - url:\n        scheme: https\n        host: jsonplaceholder.typicode.com\n        port: 443\n  badssl:\n    - url:\n        scheme: https\n        host: localhost\n        port: 60101\n  badip:\n    - url:\n        scheme: http\n        host: 10.247.13.14\n        port: 29471\n  baddns:\n    - url:\n        scheme: http\n        host: kajsdkfj23848392sdfjsj332jkjkjdkshhhhimnotahost.com\n        port: 29471\n  badremote:\n    - url:\n        scheme: http\n        host: google.com\n        port: 29471\n  badlocal:\n    - url:\n        scheme: http\n        host: localhost\n        port: 29471\n  mse61:\n    - url:\n        scheme: 'http:'\n        host: localhost\n        port: 60083\n  mse6:\n    - labels:\n        - green\n      url:\n        scheme: http://\n        host: localhost\n        port: 60083\n    - labels:\n        - blue\n      url:\n        host: localhost\n        port: 60084\n  s01:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60085\n  s02:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60086\n  s03:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60087\n  s04:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60088\n  s05:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60089\n  s06:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60090\n  s07:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60091\n  s08:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60092\n  s09:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60093\n  s10:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60094\n  s11:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60095\n  s12:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60096\n  s13:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60097\n  s14:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60098\n  s15:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60099\n  s16:\n    - url:\n        scheme: http\n        host: localhost\n        port: 60100`
            j8a -c ${J8A_FIVE_CFG}
          background: true
      - run:
          name: Wait for j8a five
          command: |
            J8A_FIVE_CFG=8443
            pwt localhost:${J8A_FIVE_CFG}
      - run:
          name: Install Test dependencies
          command: |
            sudo apt update
            sudo apt install ack -y
            sudo apt install lsof -y
      - run:
          name: Run integration tests
          command: "go test -v <<parameters.test>>"

workflows:
  version: 2
  unittest:
    jobs:
      - unit
      - testsum
      - codeclimate
  integrationtest:
    jobs:
      - integrationConnection
      - integrationContent
      - integrationDownstreamHttp
      - integrationDownstreamTls
      - integrationHeaders
      - integrationJwt
      - integrationProtocol
      - integrationResponsecode
      - integrationUpstream
      - integrationWebsocket
  performancetest:
    jobs:
      - performanceHttpLowGet
      - performanceHttpLowPost
      - performanceHttpLowPostJwt
      - performanceTlsLowPost
      - performanceHttpHighPost
      - performanceTlsHighPost

jobs:
  unit:
    resource_class: medium
    docker:
      - image: cimg/go:1.18 #
    environment:
      LOGCOLOR: TRUE
      LOGLEVEL: TRACE
    steps:
      - checkout # check out source code to working directory.
      - run: go build github.com/simonmittag/j8a
      - run: go install github.com/simonmittag/j8a/cmd/j8a
      - run: go test -v

  testsum:
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    environment:
      TEST_RESULTS: /tmp/test-results
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Create a temp directory for tests
          command: |
            mkdir -p /tmp/test-results
      - run:
          name: Test Summary for CircleCI
          command: |
            gotestsum --junitfile /tmp/test-results/unit-tests.xml .
      - store_test_results:
          path: /tmp/test-results

  codeclimate:
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    environment:
      TEST_RESULTS: /tmp/test-results
      LOGLEVEL: TRACE
      LOGCOLOR: TRUE
      CC_TEST_REPORTER_ID: a45fccea925702bc9483bdead24976073cf3e3807b22ce566d2858a700e5472c
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Create a temp directory for artifacts
          command: |
            mkdir -p /tmp/artifacts
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - run:
          name: Run tests with coverage report and upload to codeclimate
          command: |
            export GIT_COMMITTED_AT="$(date +%s)"
            export CIRCLE_SHA="$CIRCLE_SHA1"
            export CIRCLE_BRANCH=`git rev-parse --abbrev-ref HEAD`
            ./cc-test-reporter before-build
            #only run tests in this directory to exclude integration tests
            go test -cover -coverprofile=c.out .
            go tool cover -html=c.out -o coverage.html
            ./cc-test-reporter after-build --coverage-input-type gocov -p "github.com/simonmittag/j8a"
            mv coverage.html /tmp/artifacts

      - store_artifacts:
          path: /tmp/artifacts

  integrationConnection:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/connection

  integrationContent:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/content

  integrationDownstreamHttp:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/downstreamHttp

  integrationDownstreamTls:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/downstreamTls

  integrationHeaders:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/headers

  integrationJwt:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/jwt

  integrationProtocol:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/protocol

  integrationResponsecode:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/responsecode

  integrationUpstream:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/upstream

  integrationWebsocket:
    working_directory: ~/project/tmp
    resource_class: medium
    docker:
      - image: cimg/go:1.18
    steps:
      - intjob:
          test: github.com/simonmittag/j8a/integration/websocket

  performanceHttpLowGet:
    working_directory: ~/project/tmp
    docker:
      - image: simonmittag/wrk:go1.18
    resource_class: medium
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_ONE_SLUG: /mse6
      UPSTREAM_TWO_PORT: 60084
      UPSTREAM_TWO_SLUG: /mse6
      J8A_ONE_PORT: 8080
      J8A_ONE_CFG: ./integration/j8a1.yml
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY_LOW: 12
      TEST_CONCURRENCY_LOW_THRESHOLD: 1400
      TEST_STATUS_ERRORS_THRESHOLD: 1
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a one
          command: LOGLEVEL=WARN j8a -c ${J8A_ONE_CFG}
          background: true
      - run:
          name: Wait for j8a one
          command: pwt localhost:${J8A_ONE_PORT}
      - run:
          name: Execute concurrency ${TEST_CONCURRENCY_LOW} GET performance tests in HTTP mode
          command: cd performance && wrk -t ${TEST_CONCURRENCY_LOW} -c ${TEST_CONCURRENCY_LOW} -d ${TEST_DURATION_SECONDS}s -s get.lua -- http://localhost:${J8A_ONE_PORT}/mse6/get performance_results_http_low_get.json
      - run:
          name: Check concurrency ${TEST_CONCURRENCY_LOW} GET performance tests in HTTP mode
          command: |
            export reqss=`cat performance/performance_results_http_low_get.json | jq .requestspersecond`
            test ${reqss} -gt ${TEST_CONCURRENCY_LOW_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${TEST_CONCURRENCY_LOW_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${TEST_CONCURRENCY_LOW_THRESHOLD} req/s";pkill jq)
            export errstatus=`cat performance/performance_results_http_low_get.json | jq .errors.status`
            test ${errstatus} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errstatus} status errors";exit 0) || (echo "performance test failed, ${errstatus} status errors";pkill jq)
            export errtimeout=`cat performance/performance_results_http_low_get.json | jq .errors.timeout`
            test ${errtimeout} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errtimeout} timeout errors";exit 0) || (echo "performance test failed, ${errtimeout} timeout errors";pkill jq)
            export errconnect=`cat performance/performance_results_http_low_get.json | jq .errors.connect`
            test ${errconnect} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errconnect} connect errors";exit 0) || (echo "performance test failed, ${errconnect} connect errors";pkill jq)
            export errread=`cat performance/performance_results_http_low_get.json | jq .errors.read`
            test ${errread} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errread} read errors";exit 0) || (echo "performance test failed, ${errread} read errors";pkill jq)
            export errwrite=`cat performance/performance_results_http_low_get.json | jq .errors.write`
            test ${errwrite} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errwrite} write errors";exit 0) || (echo "performance test failed, ${errwrite} write errors";pkill jq)

      - run:
          name: Display performance test results
          command: |
            export reqsshlg=`cat performance/performance_results_http_low_get.json | jq .requestspersecond`
            echo "=> performance test results HTTP GET, concurrency ${TEST_CONCURRENCY_LOW}, ${reqsshlg} req/s"

      - store_artifacts:
          path: performance/performance_results_http_low_get.json
          destination: performance_results_http_low_get.json

  performanceHttpLowPost:
    working_directory: ~/project/tmp
    docker:
      - image: simonmittag/wrk:go1.18
    resource_class: medium
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_ONE_SLUG: /mse6
      UPSTREAM_TWO_PORT: 60084
      UPSTREAM_TWO_SLUG: /mse6
      UPSTREAM_THREE_PORT: 60085
      UPSTREAM_THREE_SLUG: /s1
      J8A_ONE_PORT: 8080
      J8A_ONE_CFG: ./integration/j8a1.yml
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY_LOW: 12
      TEST_CONCURRENCY_LOW_THRESHOLD: 1400
      TEST_STATUS_ERRORS_THRESHOLD: 1
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Start upstream server three
          command: mse6 -p ${UPSTREAM_THREE_PORT} -u ${UPSTREAM_THREE_SLUG}
          background: true
      - run:
          name: Wait for upstream server three
          command: pwt localhost:${UPSTREAM_THREE_PORT}
      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a one
          command: LOGLEVEL=WARN j8a -c ${J8A_ONE_CFG}
          background: true
      - run:
          name: Wait for j8a one
          command: pwt localhost:${J8A_ONE_PORT}

      - run:
          name: Execute concurrency ${TEST_CONCURRENCY_LOW} POST performance tests in HTTP mode
          command: cd performance && wrk -t ${TEST_CONCURRENCY_LOW} -c ${TEST_CONCURRENCY_LOW} -d ${TEST_DURATION_SECONDS}s -s post.lua -- http://localhost:${J8A_ONE_PORT}/mse6/post performance_results_http_low_post.json
      - run:
          name: Check concurrency ${TEST_CONCURRENCY_LOW} POST performance tests in HTTP mode
          command: |
            export reqss=`cat performance/performance_results_http_low_post.json | jq .requestspersecond`
            test ${reqss} -gt ${TEST_CONCURRENCY_LOW_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${TEST_CONCURRENCY_LOW_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${TEST_CONCURRENCY_LOW_THRESHOLD} req/s";pkill jq)
            export errstatus=`cat performance/performance_results_http_low_post.json | jq .errors.status`
            test ${errstatus} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errstatus} status errors";exit 0) || (echo "performance test failed, ${errstatus} status errors";pkill jq)
            export errtimeout=`cat performance/performance_results_http_low_post.json | jq .errors.timeout`
            test ${errtimeout} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errtimeout} timeout errors";exit 0) || (echo "performance test failed, ${errtimeout} timeout errors";pkill jq)
            export errconnect=`cat performance/performance_results_http_low_post.json | jq .errors.connect`
            test ${errconnect} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errconnect} connect errors";exit 0) || (echo "performance test failed, ${errconnect} connect errors";pkill jq)
            export errread=`cat performance/performance_results_http_low_post.json | jq .errors.read`
            test ${errread} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errread} read errors";exit 0) || (echo "performance test failed, ${errread} read errors";pkill jq)
            export errwrite=`cat performance/performance_results_http_low_post.json | jq .errors.write`
            test ${errwrite} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errwrite} write errors";exit 0) || (echo "performance test failed, ${errwrite} write errors";pkill jq)

      - run:
          name: Display performance test results
          command: |
            export reqsshlp=`cat performance/performance_results_http_low_post.json | jq .requestspersecond`
            echo "=> performance test results HTTP POST 2.5kb, concurrency ${TEST_CONCURRENCY_LOW}, ${reqsshlp} req/s"
      - store_artifacts:
          path: performance/performance_results_http_low_post.json
          destination: performance_results_http_low_post.json

  performanceHttpLowPostJwt:
    working_directory: ~/project/tmp
    docker:
      - image: simonmittag/wrk:go1.18
    resource_class: medium
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_ONE_SLUG: /mse6
      UPSTREAM_TWO_PORT: 60084
      UPSTREAM_TWO_SLUG: /mse6
      UPSTREAM_THREE_PORT: 60085
      UPSTREAM_THREE_SLUG: /s1
      J8A_ONE_PORT: 8080
      J8A_ONE_CFG: ./integration/j8a1.yml
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY_JWT_LOW: 12
      TEST_CONCURRENCY_JWT_LOW_THRESHOLD: 1000
      TEST_STATUS_ERRORS_THRESHOLD: 1
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Start upstream server three
          command: mse6 -p ${UPSTREAM_THREE_PORT} -u ${UPSTREAM_THREE_SLUG}
          background: true
      - run:
          name: Wait for upstream server three
          command: pwt localhost:${UPSTREAM_THREE_PORT}
      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a one
          command: LOGLEVEL=WARN j8a -c ${J8A_ONE_CFG}
          background: true
      - run:
          name: Wait for j8a one
          command: pwt localhost:${J8A_ONE_PORT}

      - run:
          name: Execute concurrency ${TEST_CONCURRENCY_JWT_LOW} JWT performance tests in HTTP mode
          command: cd performance && wrk -t ${TEST_CONCURRENCY_JWT_LOW} -c ${TEST_CONCURRENCY_JWT_LOW} -d ${TEST_DURATION_SECONDS}s -s postJwt.lua -- http://localhost:${J8A_ONE_PORT}/jwtrs256/post performance_results_jwt_http_low.json
      - run:
          name: Check concurrency ${TEST_CONCURRENCY_JWT_LOW} JWT performance tests in HTTP mode
          command: |
            export reqss=`cat performance/performance_results_jwt_http_low.json | jq .requestspersecond`
            test ${reqss} -gt ${TEST_CONCURRENCY_JWT_LOW_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${TEST_CONCURRENCY_JWT_LOW_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${TEST_CONCURRENCY_JWT_LOW_THRESHOLD} req/s";pkill jq)
            export errstatus=`cat performance/performance_results_jwt_http_low.json | jq .errors.status`
            test ${errstatus} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errstatus} status errors";exit 0) || (echo "performance test failed, ${errstatus} status errors";pkill jq)
            export errtimeout=`cat performance/performance_results_jwt_http_low.json | jq .errors.timeout`
            test ${errtimeout} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errtimeout} timeout errors";exit 0) || (echo "performance test failed, ${errtimeout} timeout errors";pkill jq)
            export errconnect=`cat performance/performance_results_jwt_http_low.json | jq .errors.connect`
            test ${errconnect} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errconnect} connect errors";exit 0) || (echo "performance test failed, ${errconnect} connect errors";pkill jq)
            export errread=`cat performance/performance_results_jwt_http_low.json | jq .errors.read`
            test ${errread} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errread} read errors";exit 0) || (echo "performance test failed, ${errread} read errors";pkill jq)
            export errwrite=`cat performance/performance_results_jwt_http_low.json | jq .errors.write`
            test ${errwrite} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errwrite} write errors";exit 0) || (echo "performance test failed, ${errwrite} write errors";pkill jq)

      - run:
          name: Display performance test results
          command: |
            export reqsshjl=`cat performance/performance_results_jwt_http_low.json | jq .requestspersecond`
            echo "=> performance test results HTTP POST 2.5kb (JWT), concurrency ${TEST_CONCURRENCY_JWT_LOW}, ${reqsshjl} req/s"
      - store_artifacts:
          path: performance/performance_results_jwt_http_low.json
          destination: performance_results_jwt_http_low.json

  performanceTlsLowPost:
    working_directory: ~/project/tmp
    docker:
      - image: simonmittag/wrk:go1.18
    resource_class: medium
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_ONE_SLUG: /mse6
      UPSTREAM_TWO_PORT: 60084
      UPSTREAM_TWO_SLUG: /mse6
      UPSTREAM_THREE_PORT: 60085
      UPSTREAM_THREE_SLUG: /s1
      J8A_THREE_PORT: 8443
      J8A_THREE_CFG: ./integration/j8a3.yml
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY_LOW: 12
      TEST_CONCURRENCY_LOW_THRESHOLD: 1400
      TEST_STATUS_ERRORS_THRESHOLD: 1
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Start upstream server three
          command: mse6 -p ${UPSTREAM_THREE_PORT} -u ${UPSTREAM_THREE_SLUG}
          background: true
      - run:
          name: Wait for upstream server three
          command: pwt localhost:${UPSTREAM_THREE_PORT}
      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a three
          command: LOGLEVEL=WARN j8a -c ${J8A_THREE_CFG}
          background: true
      - run:
          name: Wait for j8a three
          command: pwt localhost:${J8A_THREE_PORT}

      - run:
          name: Execute concurrency ${TEST_CONCURRENCY_LOW} performance tests in TLS mode
          command: cd performance && wrk -t ${TEST_CONCURRENCY_LOW} -c ${TEST_CONCURRENCY_LOW} -d ${TEST_DURATION_SECONDS}s -s post.lua -- https://localhost:${J8A_THREE_PORT}/mse6/post performance_results_tls_low.json
      - run:
          name: Check concurrency ${TEST_CONCURRENCY_LOW} performance tests in TLS mode
          command: |
            export reqss=`cat performance/performance_results_tls_low.json | jq .requestspersecond`
            test ${reqss} -gt ${TEST_CONCURRENCY_LOW_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${TEST_CONCURRENCY_LOW_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${TEST_CONCURRENCY_LOW_THRESHOLD} req/s";pkill jq)
            export errstatus=`cat performance/performance_results_tls_low.json | jq .errors.status`
            test ${errstatus} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errstatus} status errors";exit 0) || (echo "performance test failed, ${errstatus} status errors";pkill jq)
            export errtimeout=`cat performance/performance_results_tls_low.json | jq .errors.timeout`
            test ${errtimeout} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errtimeout} timeout errors";exit 0) || (echo "performance test failed, ${errtimeout} timeout errors";pkill jq)
            export errconnect=`cat performance/performance_results_tls_low.json | jq .errors.connect`
            test ${errconnect} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errconnect} connect errors";exit 0) || (echo "performance test failed, ${errconnect} connect errors";pkill jq)
            export errread=`cat performance/performance_results_tls_low.json | jq .errors.read`
            test ${errread} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errread} read errors";exit 0) || (echo "performance test failed, ${errread} read errors";pkill jq)
            export errwrite=`cat performance/performance_results_tls_low.json | jq .errors.write`
            test ${errwrite} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errwrite} write errors";exit 0) || (echo "performance test failed, ${errwrite} write errors";pkill jq)

      - run:
          name: Display performance test results
          command: |
            export reqsstl=`cat performance/performance_results_tls_low.json | jq .requestspersecond`
            echo "=> performance test results TLS POST 2.5kb, concurrency ${TEST_CONCURRENCY_LOW}, ${reqsstl} req/s"
      - store_artifacts:
          path: performance/performance_results_tls_low.json
          destination: performance_results_tls_low.json

  performanceHttpHighPost:
    working_directory: ~/project/tmp
    docker:
      - image: simonmittag/wrk:go1.18
    resource_class: medium
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_ONE_SLUG: /mse6
      UPSTREAM_TWO_PORT: 60084
      UPSTREAM_TWO_SLUG: /mse6
      UPSTREAM_THREE_PORT: 60085
      UPSTREAM_THREE_SLUG: /s1
      J8A_ONE_PORT: 8080
      J8A_ONE_CFG: ./integration/j8a1.yml
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY_HIGH: 18
      TEST_CONCURRENCY_HIGH_THRESHOLD: 1000
      TEST_STATUS_ERRORS_THRESHOLD: 37
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Start upstream server three
          command: mse6 -p ${UPSTREAM_THREE_PORT} -u ${UPSTREAM_THREE_SLUG}
          background: true
      - run:
          name: Wait for upstream server three
          command: pwt localhost:${UPSTREAM_THREE_PORT}
      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a one
          command: LOGLEVEL=WARN j8a -c ${J8A_ONE_CFG}
          background: true
      - run:
          name: Wait for j8a one
          command: pwt localhost:${J8A_ONE_PORT}

      - run:
          name: Execute concurrency ${TEST_CONCURRENCY_HIGH} performance tests in HTTP mode
          command: cd performance && wrk -t ${TEST_CONCURRENCY_HIGH} -c ${TEST_CONCURRENCY_HIGH} -d ${TEST_DURATION_SECONDS}s -s post.lua -- http://localhost:${J8A_ONE_PORT}/mse6/post performance_results_http_high.json
      - run:
          name: Check concurrency ${TEST_CONCURRENCY_HIGH} performance tests in HTTP mode
          command: |
            export reqss=`cat performance/performance_results_http_high.json | jq .requestspersecond`
            test ${reqss} -gt ${TEST_CONCURRENCY_HIGH_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${TEST_CONCURRENCY_HIGH_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${TEST_CONCURRENCY_HIGH_THRESHOLD} req/s";pkill jq)
            export errstatus=`cat performance/performance_results_http_high.json | jq .errors.status`
            test ${errstatus} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errstatus} status errors";exit 0) || (echo "performance test failed, ${errstatus} status errors";pkill jq)
            export errtimeout=`cat performance/performance_results_http_high.json | jq .errors.timeout`
            test ${errtimeout} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errtimeout} timeout errors";exit 0) || (echo "performance test failed, ${errtimeout} timeout errors";pkill jq)
            export errconnect=`cat performance/performance_results_http_high.json | jq .errors.connect`
            test ${errconnect} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errconnect} connect errors";exit 0) || (echo "performance test failed, ${errconnect} connect errors";pkill jq)
            export errread=`cat performance/performance_results_http_high.json | jq .errors.read`
            test ${errread} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errread} read errors";exit 0) || (echo "performance test failed, ${errread} read errors";pkill jq)
            export errwrite=`cat performance/performance_results_http_high.json | jq .errors.write`
            test ${errwrite} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errwrite} write errors";exit 0) || (echo "performance test failed, ${errwrite} write errors";pkill jq)

      - run:
          name: Display performance test results
          command: |
            export reqsshh=`cat performance/performance_results_http_high.json | jq .requestspersecond`
            echo "=> performance test results HTTP POST 2.5kb, concurrency ${TEST_CONCURRENCY_HIGH}, ${reqsshh} req/s"
      - store_artifacts:
          path: performance/performance_results_http_high.json
          destination: performance_results_http_high.json

  performanceTlsHighPost:
    working_directory: ~/project/tmp
    docker:
      - image: simonmittag/wrk:go1.18
    resource_class: medium
    environment:
      LOGLEVEL: WARN
      LOGCOLOR: FALSE
      UPSTREAM_ONE_PORT: 60083
      UPSTREAM_ONE_SLUG: /mse6
      UPSTREAM_TWO_PORT: 60084
      UPSTREAM_TWO_SLUG: /mse6
      UPSTREAM_THREE_PORT: 60085
      UPSTREAM_THREE_SLUG: /s1
      J8A_THREE_PORT: 8443
      J8A_THREE_CFG: ./integration/j8a3.yml
      TEST_DURATION_SECONDS: 10
      TEST_CONCURRENCY_HIGH: 18
      TEST_CONCURRENCY_HIGH_THRESHOLD: 1000
      TEST_STATUS_ERRORS_THRESHOLD: 25
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            sudo apt-get install jq
            go get github.com/simonmittag/pwt
            go install github.com/simonmittag/pwt/cmd/pwt
            go get github.com/simonmittag/mse6
            go install github.com/simonmittag/mse6/cmd/mse6
      - run:
          name: Start upstream server one
          command: mse6 -p ${UPSTREAM_ONE_PORT}
          background: true
      - run:
          name: Wait for upstream server one
          command: pwt localhost:${UPSTREAM_ONE_PORT}
      - run:
          name: Start upstream server two
          command: mse6 -p ${UPSTREAM_TWO_PORT}
          background: true
      - run:
          name: Wait for upstream server two
          command: pwt localhost:${UPSTREAM_TWO_PORT}
      - run:
          name: Start upstream server three
          command: mse6 -p ${UPSTREAM_THREE_PORT} -u ${UPSTREAM_THREE_SLUG}
          background: true
      - run:
          name: Wait for upstream server three
          command: pwt localhost:${UPSTREAM_THREE_PORT}
      - run:
          name: Install j8a
          command: |
            go build github.com/simonmittag/j8a
            go install github.com/simonmittag/j8a/cmd/j8a
      - run:
          name: Start j8a three
          command: LOGLEVEL=WARN j8a -c ${J8A_THREE_CFG}
          background: true
      - run:
          name: Wait for j8a three
          command: pwt localhost:${J8A_THREE_PORT}
      - run:
          name: Execute concurrency ${TEST_CONCURRENCY_HIGH} performance tests in TLS mode
          command: cd performance && wrk -t ${TEST_CONCURRENCY_HIGH} -c ${TEST_CONCURRENCY_HIGH} -d ${TEST_DURATION_SECONDS}s -s post.lua -- https://localhost:${J8A_THREE_PORT}/mse6/post performance_results_tls_high.json
      - run:
          name: Check concurrency ${TEST_CONCURRENCY_HIGH} performance tests in TLS mode
          command: |
            export reqss=`cat performance/performance_results_tls_high.json | jq .requestspersecond`
            test ${reqss} -gt ${TEST_CONCURRENCY_HIGH_THRESHOLD} && (echo "performance test passed, ${reqss} req/s > ${TEST_CONCURRENCY_HIGH_THRESHOLD} req/s";exit 0) || (echo "performance test failed, ${reqss} req/s < ${TEST_CONCURRENCY_HIGH_THRESHOLD} req/s";pkill jq)
            export errstatus=`cat performance/performance_results_tls_high.json | jq .errors.status`
            test ${errstatus} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errstatus} status errors";exit 0) || (echo "performance test failed, ${errstatus} status errors";pkill jq)
            export errtimeout=`cat performance/performance_results_tls_high.json | jq .errors.timeout`
            test ${errtimeout} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errtimeout} timeout errors";exit 0) || (echo "performance test failed, ${errtimeout} timeout errors";pkill jq)
            export errconnect=`cat performance/performance_results_tls_high.json | jq .errors.connect`
            test ${errconnect} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errconnect} connect errors";exit 0) || (echo "performance test failed, ${errconnect} connect errors";pkill jq)
            export errread=`cat performance/performance_results_tls_high.json | jq .errors.read`
            test ${errread} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errread} read errors";exit 0) || (echo "performance test failed, ${errread} read errors";pkill jq)
            export errwrite=`cat performance/performance_results_tls_high.json | jq .errors.write`
            test ${errwrite} -lt ${TEST_STATUS_ERRORS_THRESHOLD} && (echo "performance test passed, ${errwrite} write errors";exit 0) || (echo "performance test failed, ${errwrite} write errors";pkill jq)
      - run:
          name: Display performance test results
          command: |
            export reqssth=`cat performance/performance_results_tls_high.json | jq .requestspersecond`
            echo "=> performance test results TLS POST 2.5kb, concurrency ${TEST_CONCURRENCY_HIGH}, ${reqssth} req/s"
      - store_artifacts:
          path: performance/performance_results_tls_high.json
          destination: performance_results_tls_high.json